[{"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/index.js":"1","/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/App.js":"2","/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js":"3","/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js":"4","/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/util/interact.js":"5"},{"size":500,"mtime":1637118329148,"results":"6","hashOfConfig":"7"},{"size":182,"mtime":1637118329147,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1637118329148,"results":"9","hashOfConfig":"7"},{"size":5365,"mtime":1638301083102,"results":"10","hashOfConfig":"7"},{"size":5614,"mtime":1638254482320,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ftcimh",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/index.js",[],["25","26"],"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/App.js",[],"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js",[],"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js",["27","28","29","30"],"import React from \"react\";\nimport Select from 'react-select';\nimport { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  loadChairperson,\n  getCurrentWalletConnected,\n  vote,\n  addPerson,\n  votingContract,\n  determineWinner,\n  loadOptions\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [options, setOptions] = useState([]);\n  const [winner, setWinner] = useState(\"\");\n  const [showVoteDropdown, setShowVoteDropdown] = useState(false); \n  const [showWinner, setShowWinner] = useState(false); \n  const [voteChoice, setVoteChoice] = useState(\"\"); \n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [chairperson, setChairperson] = useState(\"\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const cp = await loadChairperson();\n    setChairperson(cp);\n\n    const o = await loadOptions();\n    console.log(\"Options are: \" + o);\n    const refinedOptions = o.map((name) => { \n      return {value: name, label: name}}\n    );\n    setOptions(refinedOptions);\n\n    addSmartContractListener();\n\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n\n  }, []);\n\n\n  function addSmartContractListener() {\n\n\n    votingContract.events.PersonAdded({}, (error, data) => {\n      console.log(\"Person was added\");\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        const refinedOptions = data.returnValues[0].map((name) => { \n          return {value: name, label: name}}\n        );\n\n        console.log(\"Refined Options: \" + refinedOptions);\n\n        setOptions(refinedOptions);\n      }\n    });\n\n    // votingContract.events.VoteComplete({}, (error, data) => {\n    //   console.log(\"The vote was completed!\");\n    //   if (error) {\n    //     setStatus(\"😥 \" + error.message);\n    //   } else {\n    //     const winnerName = data.returnValues[0];\n    //     setWinner(winnerName);\n    //     setShowWinner(true);\n    //   }\n    // });\n    \n  }\n\n  function addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your\n          browser.\n        </a>\n      </p>\n    );\n  }\n}\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onRegisterPressed = async () => {\n    //remove this and set show vote dropdown when \n    setShowVoteDropdown(true);\n    const { status } = await addPerson(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onVotePressed = async () => {\n    await vote(walletAddress, voteChoice);\n  };\n  const onDetermineWinner = async () => {\n    const winnerName = await determineWinner(walletAddress);\n    setWinner(winnerName);\n    setShowWinner(true);\n  };\n\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n\n      <div id=\"header\" style={{ height: \"70px\" }}>\n        <img id=\"logo\" src={alchemylogo}></img>\n        <button id=\"walletButton\" onClick={connectWalletPressed}>\n          {walletAddress.length > 0 ? (\n            \"Connected: \" +\n            String(walletAddress).substring(0, 6) +\n            \"...\" +\n            String(walletAddress).substring(38)\n          ) : (\n            <span>Connect Wallet</span>\n          )}\n        </button>\n      </div>\n\n      <div id='meat'>\n            <div id=\"registration\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Please enter your name here\"\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  value={newMessage}\n                />\n                <p id=\"status\">{status}</p>\n                <div id=\"buttons\" style={{ marginTop: \"0px\" }}>\n                  <button id=\"register\" onClick={onRegisterPressed} style={{ marginTop: \"0px\" }} >\n                    Register\n                  </button>\n                  \n                </div>\n            </div>\n            <div id=\"voting\">\n              { showVoteDropdown && (\n                <div style={{ paddingTop: \"20px\" }}>\n\n                  <Select options={options} onChange={(e) => setVoteChoice(e.value)}/>\n\n                  <button id=\"vote\" onClick={onVotePressed} style={{ marginTop: \"20px\" }}>\n                    Vote\n                  </button>\n\n                  <button id=\"determineWinner\" onClick={onDetermineWinner} style={{ marginTop: \"0px\", marginLeft: \"20px\" }}>\n                    Tally Votes!\n                  </button>\n\n                  \n                </div>\n              )}\n              { showWinner && (\n                <div>\n                  <h2>The winner is: {winner}</h2>\n                </div>\n              )}\n\n            </div>\n\n      </div>\n\n      \n    </div>\n  );\n};\n\nexport default HelloWorld;\n","/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/util/interact.js",["31","32","33","34"],"require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x0E6b9b5CE0D05bd0bEa7114699d6233CE487A9cA\";\n\nconst votingContractABI = require(\"../voting-contract-abi.json\");\nconst votingContractAddress = \"0x3eC6a2702bCC1324C7169dFC4D38249589Be1Fe8\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\n\nexport const votingContract = new web3.eth.Contract(\n    votingContractABI,\n    votingContractAddress\n);\n\nexport const loadChairperson = async () => { \n    const cp = await votingContract.methods.chairperson().call(); \n    return cp;\n};\n\nexport const loadOptions = async () => { \n  const o = await votingContract.methods.getPeopleNames().call(); \n  return o;\n};\n\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\nexport const vote = async (address, name) => {\n    console.log(\"vote called!\");\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    if (name.trim() === \"\") {\n        return {\n        status: \"❌ You must select a candidate to vote for\",\n        };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n      to: votingContractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: votingContract.methods.vote(name).encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n      });\n      return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            </span>\n        ),\n      };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n\n\n\n};\n\nexport const addPerson = async (address, name) => {\n    console.log(\"addPerson called!\");\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    if (name.trim() === \"\") {\n        return {\n        status: \"❌ Your message cannot be an empty string.\",\n        };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n      to: votingContractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: votingContract.methods.addPerson(name).encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n      });\n      return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            </span>\n        ),\n      };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n\n};\n\nexport const determineWinner = async (address) => {\n    console.log(\"determineWinner called!\");\n\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    const winner = await votingContract.methods.determineWinner().call(); \n   \n    console.log(\"winner is: \" + winner);\n    return winner;\n\n};\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":26,"column":10,"nodeType":"41","messageId":"42","endLine":26,"endColumn":21},{"ruleId":"43","severity":1,"message":"44","line":30,"column":13,"nodeType":"45","endLine":49,"endColumn":4},{"ruleId":"46","severity":1,"message":"47","line":98,"column":9,"nodeType":"48","endLine":98,"endColumn":71},{"ruleId":"49","severity":1,"message":"50","line":135,"column":9,"nodeType":"48","endLine":135,"endColumn":42},{"ruleId":"46","severity":1,"message":"47","line":57,"column":13,"nodeType":"48","endLine":57,"endColumn":75},{"ruleId":"46","severity":1,"message":"47","line":98,"column":15,"nodeType":"48","endLine":98,"endColumn":77},{"ruleId":"46","severity":1,"message":"47","line":142,"column":13,"nodeType":"48","endLine":142,"endColumn":83},{"ruleId":"46","severity":1,"message":"47","line":191,"column":13,"nodeType":"48","endLine":191,"endColumn":83},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'chairperson' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]