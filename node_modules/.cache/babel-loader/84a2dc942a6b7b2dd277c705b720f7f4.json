{"ast":null,"code":"var _jsxFileName = \"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Select from 'react-select';\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected, vote, addPerson, loadCurrentPeople, votingContract, startVoting } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HelloWorld = () => {\n  _s();\n\n  //state variables\n  const [options, setOptions] = useState([{\n    value: 'chocolate',\n    label: 'Chocolate'\n  }, {\n    value: 'strawberry',\n    label: 'Strawberry'\n  }, {\n    value: 'vanilla',\n    label: 'Vanilla'\n  }]);\n  const [showVoteDropdown, setShowVoteDropdown] = useState(false);\n  const [voteChoice, setVoteChoice] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network. lol\"); //default message\n\n  const [newMessage, setNewMessage] = useState(\"\"); //called only once\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n    votingContract.events.PersonAdded({}, (error, data) => {\n      console.log(\"Person was added\");\n\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        const refinedOptions = data.returnValues[0].map(name => {\n          return {\n            value: name,\n            label: name\n          };\n        });\n        console.log(\"Refined Options: \" + refinedOptions);\n        setOptions(refinedOptions);\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onRegisterPressed = async () => {\n    //remove this and set show vote dropdown when \n    setShowVoteDropdown(true);\n    const {\n      status\n    } = await addPerson(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onVotePressed = async () => {\n    await vote(walletAddress, voteChoice);\n  };\n\n  const onBeginVoting = async () => {\n    await startVoting(walletAddress);\n  }; //the UI of our component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"logo\",\n        src: alchemylogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"walletButton\",\n        onClick: connectWalletPressed,\n        children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"registration\",\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Please enter your name here\",\n          onChange: e => setNewMessage(e.target.value),\n          value: newMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"status\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"buttons\",\n          style: {\n            marginTop: \"0px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"register\",\n            onClick: onRegisterPressed,\n            style: {\n              marginTop: \"0px\"\n            },\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"beginVoting\",\n            onClick: onBeginVoting,\n            style: {\n              marginTop: \"0px\",\n              marginLeft: \"20px\"\n            },\n            children: \"Begin Voting!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"voting\",\n        className: \"col\",\n        children: showVoteDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingTop: \"1px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            options: options,\n            onChange: e => setVoteChoice(e.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"vote\",\n            onClick: onVotePressed,\n            style: {\n              marginTop: \"0px\"\n            },\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HelloWorld, \"bLtShUb17ChKoymXw+fotd1utXY=\");\n\n_c = HelloWorld;\nexport default HelloWorld;\n\nvar _c;\n\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"sources":["/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js"],"names":["React","Select","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","vote","addPerson","loadCurrentPeople","votingContract","startVoting","HelloWorld","options","setOptions","value","label","showVoteDropdown","setShowVoteDropdown","voteChoice","setVoteChoice","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","addSmartContractListener","address","addWalletListener","events","UpdatedMessages","error","data","returnValues","PersonAdded","console","log","refinedOptions","map","name","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onRegisterPressed","onVotePressed","onBeginVoting","alchemylogo","String","substring","e","target","marginTop","marginLeft","paddingTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Select from 'react-select';\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n  vote,\n  addPerson,\n  loadCurrentPeople,\n  votingContract,\n  startVoting\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [options, setOptions] = useState([\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' }\n  ]);\n  const [showVoteDropdown, setShowVoteDropdown] = useState(false); \n  const [voteChoice, setVoteChoice] = useState(\"\"); \n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network. lol\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n\n    votingContract.events.PersonAdded({}, (error, data) => {\n      console.log(\"Person was added\");\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        const refinedOptions = data.returnValues[0].map((name) => { \n          return {value: name, label: name}}\n        );\n\n        console.log(\"Refined Options: \" + refinedOptions);\n\n        setOptions(refinedOptions);\n      }\n    });\n  }\n\n  function addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your\n          browser.\n        </a>\n      </p>\n    );\n  }\n}\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onRegisterPressed = async () => {\n    //remove this and set show vote dropdown when \n    setShowVoteDropdown(true);\n    const { status } = await addPerson(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onVotePressed = async () => {\n    await vote(walletAddress, voteChoice);\n  };\n  const onBeginVoting = async () => {\n    await startVoting(walletAddress);\n  };\n\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n\n      <div id=\"header\">\n        <img id=\"logo\" src={alchemylogo}></img>\n        <button id=\"walletButton\" onClick={connectWalletPressed}>\n          {walletAddress.length > 0 ? (\n            \"Connected: \" +\n            String(walletAddress).substring(0, 6) +\n            \"...\" +\n            String(walletAddress).substring(38)\n          ) : (\n            <span>Connect Wallet</span>\n          )}\n        </button>\n      </div>\n\n      <div className=\"row\">\n            <div id=\"registration\" className=\"col\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Please enter your name here\"\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  value={newMessage}\n                />\n                <p id=\"status\">{status}</p>\n                <div id=\"buttons\" style={{ marginTop: \"0px\" }}>\n                  <button id=\"register\" onClick={onRegisterPressed} style={{ marginTop: \"0px\" }} >\n                    Register\n                  </button>\n                  <button id=\"beginVoting\" onClick={onBeginVoting} style={{ marginTop: \"0px\", marginLeft: \"20px\" }}>\n                    Begin Voting!\n                  </button>\n                </div>\n            </div>\n            <div id=\"voting\" className=\"col\">\n              { showVoteDropdown && (\n                <div style={{ paddingTop: \"1px\" }}>\n\n                  <Select options={options} onChange={(e) => setVoteChoice(e.value)}/>\n\n                  <button id=\"vote\" onClick={onVotePressed} style={{ marginTop: \"0px\" }}>\n                    Vote\n                  </button>\n                </div>\n              )}\n\n            </div>\n\n      </div>\n\n      \n    </div>\n  );\n};\n\nexport default HelloWorld;\n"]},"metadata":{},"sourceType":"module"}