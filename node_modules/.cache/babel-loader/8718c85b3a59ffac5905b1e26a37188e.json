{"ast":null,"code":"var _jsxFileName = \"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Select from 'react-select';\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected, vote, addPerson, loadCurrentPeople, votingContract } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HelloWorld = () => {\n  _s();\n\n  //state variables\n  const [options, setOptions] = useState([{\n    value: 'chocolate',\n    label: 'Chocolate'\n  }, {\n    value: 'strawberry',\n    label: 'Strawberry'\n  }, {\n    value: 'vanilla',\n    label: 'Vanilla'\n  }]);\n  const [showVoteDropdown, setShowVoteDropdown] = useState(false);\n  const [voteChoice, setVoteChoice] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network. lol\"); //default message\n\n  const [newMessage, setNewMessage] = useState(\"\"); //called only once\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n    votingContract.events.PersonAdded({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        console.log(\"Data: \" + data);\n        console.log(\"Data.returnValues[0]: \" + data.returnValues[0]);\n        const refinedOptions = data.returnValues[0].map(name => {\n          return {\n            value: name,\n            label: name\n          };\n        });\n        console.log(\"Refined Options: \" + refinedOptions);\n        setOptions(refinedOptions);\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    //remove this and set show vote dropdown when \n    setShowVoteDropdown(true);\n    const {\n      status\n    } = await addPerson(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onVotePressed = async () => {// await vote(voteChoice);\n  }; //the UI of our component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"1px\"\n      },\n      children: \"Please enter your name here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"First Last\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"register\",\n        onClick: onUpdatePressed,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), showVoteDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        options: options,\n        onChange: e => setVoteChoice(e.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"vote\",\n        onClick: onVotePressed,\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HelloWorld, \"bLtShUb17ChKoymXw+fotd1utXY=\");\n\n_c = HelloWorld;\nexport default HelloWorld;\n\nvar _c;\n\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"sources":["/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js"],"names":["React","Select","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","vote","addPerson","loadCurrentPeople","votingContract","HelloWorld","options","setOptions","value","label","showVoteDropdown","setShowVoteDropdown","voteChoice","setVoteChoice","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","addSmartContractListener","address","addWalletListener","events","UpdatedMessages","error","data","returnValues","PersonAdded","console","log","refinedOptions","map","name","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onUpdatePressed","onVotePressed","alchemylogo","String","substring","paddingTop","e","target"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Select from 'react-select';\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n  vote,\n  addPerson,\n  loadCurrentPeople,\n  votingContract\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [options, setOptions] = useState([\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' }\n  ]);\n  const [showVoteDropdown, setShowVoteDropdown] = useState(false); \n  const [voteChoice, setVoteChoice] = useState(\"\"); \n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network. lol\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n\n    votingContract.events.PersonAdded({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        console.log(\"Data: \" + data);\n        console.log(\"Data.returnValues[0]: \" + data.returnValues[0]);\n\n        const refinedOptions = data.returnValues[0].map((name) => { \n          return {value: name, label: name}}\n        );\n\n        console.log(\"Refined Options: \" + refinedOptions);\n\n        setOptions(refinedOptions);\n      }\n    });\n  }\n\n  function addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your\n          browser.\n        </a>\n      </p>\n    );\n  }\n}\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    //remove this and set show vote dropdown when \n    setShowVoteDropdown(true);\n    const { status } = await addPerson(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onVotePressed = async () => {\n    // await vote(voteChoice);\n  };\n\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"1px\" }}>Please enter your name here:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"First Last\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"register\" onClick={onUpdatePressed}>\n          Register\n        </button>\n      </div>\n      { showVoteDropdown && (\n          <div style={{ paddingTop: \"18px\" }}>\n          <Select options={options} onChange={(e) => setVoteChoice(e.value)}/>\n\n          <button id=\"vote\" onClick={onVotePressed}>\n            Vote\n          </button>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default HelloWorld;\n"]},"metadata":{},"sourceType":"module"}