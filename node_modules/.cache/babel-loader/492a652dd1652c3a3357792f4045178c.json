{"ast":null,"code":"var _jsxFileName = \"/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x0E6b9b5CE0D05bd0bEa7114699d6233CE487A9cA\";\n\nconst votingContractABI = require(\"../voting-contract-abi.json\");\n\nconst votingContractAddress = \"0x05406b65E21F9b872dbE60B23112D353Dc81c1B6\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const votingContract = new web3.eth.Contract(votingContractABI, votingContractAddress);\nexport const loadChairperson = async () => {\n  const cp = await votingContract.methods.chairperson().call();\n  return cp;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://ropsten.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const vote = async (address, name) => {\n  console.log(\"vote called!\"); //input error handling\n\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (name.trim() === \"\") {\n    return {\n      status: \"❌ You must select a candidate to vote for\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: votingContractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: votingContract.methods.vote(name).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://ropsten.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const addPerson = async (address, name) => {\n  console.log(\"addPerson called!\"); //input error handling\n\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (name.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: votingContractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: votingContract.methods.addPerson(name).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://ropsten.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const determineWinner = async address => {\n  console.log(\"determineWinner called!\"); //input error handling\n\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: votingContractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: votingContract.methods.determineWinner().encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://ropsten.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["/Users/mihirchitalia/Desktop/hello-world-part-four-tutorial/starter-files/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","votingContractABI","votingContractAddress","helloWorldContract","eth","Contract","votingContract","loadChairperson","cp","methods","chairperson","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error","vote","name","console","log","addPerson","determineWinner"],"mappings":"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","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x0E6b9b5CE0D05bd0bEa7114699d6233CE487A9cA\";\n\nconst votingContractABI = require(\"../voting-contract-abi.json\");\nconst votingContractAddress = \"0x05406b65E21F9b872dbE60B23112D353Dc81c1B6\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\n\nexport const votingContract = new web3.eth.Contract(\n    votingContractABI,\n    votingContractAddress\n);\n\nexport const loadChairperson = async () => { \n    const cp = await votingContract.methods.chairperson().call(); \n    return cp;\n};\n\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\nexport const updateMessage = async (address, message) => {\n    //input error handling\n    if (!window.ethereum || address === null) {\n        return {\n        status:\n            \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n        };\n    }\n\n    if (message.trim() === \"\") {\n        return {\n        status: \"❌ Your message cannot be an empty string.\",\n        };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: address, // must match user's active address.\n        data: helloWorldContract.methods.update(message).encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n        const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n        });\n        return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n            </span>\n        ),\n        };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n};\n\nexport const vote = async (address, name) => {\n    console.log(\"vote called!\");\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    if (name.trim() === \"\") {\n        return {\n        status: \"❌ You must select a candidate to vote for\",\n        };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n      to: votingContractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: votingContract.methods.vote(name).encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n      });\n      return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n            </span>\n        ),\n      };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n\n\n\n};\n\nexport const addPerson = async (address, name) => {\n    console.log(\"addPerson called!\");\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    if (name.trim() === \"\") {\n        return {\n        status: \"❌ Your message cannot be an empty string.\",\n        };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n      to: votingContractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: votingContract.methods.addPerson(name).encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n      });\n      return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n            </span>\n        ),\n      };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n\n};\n\nexport const determineWinner = async (address) => {\n    console.log(\"determineWinner called!\");\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n      status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n\n    //set up transaction parameters\n    const transactionParameters = {\n      to: votingContractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: votingContract.methods.determineWinner().encodeABI(),\n    };\n\n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n      });\n      return {\n        status: (\n            <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n                View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n            </span>\n        ),\n      };\n    } catch (error) {\n        return {\n        status: \"😥 \" + error.message,\n        };\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}